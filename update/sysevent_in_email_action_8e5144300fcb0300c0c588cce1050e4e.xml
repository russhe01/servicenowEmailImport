<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sysevent_in_email_action">
    <sysevent_in_email_action action="INSERT_OR_UPDATE">
        <action>record_action</action>
        <active>true</active>
        <assignment_operator/>
        <condition_script/>
        <description/>
        <event_name>email.read</event_name>
        <filter_condition table="sys_email">subject=File Import^EQ<item endquery="false" field="subject" goto="false" newquery="false" operator="=" or="false" value="File Import"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <from/>
        <name>Email Attachment Import</name>
        <order>100</order>
        <reply_email/>
        <required_roles/>
        <script><![CDATA[(function runAction(/*GlideRecord*/ current, /*GlideRecord*/ event, /*EmailWrapper*/ email, /*ScopedEmailLogger*/ logger, /*EmailClassifier*/ classifier) {  
      
    var importSetTableName = gs.getProperty('x_17179_email_impo.email.attachment.import.set.table');  
    var transformMapIDs = gs.getProperty('x_17179_email_impo.email.attachment.transform.map');
	var fileFormat = gs.getProperty('x_17179_email_impo.email.attachment.file.format');
    var applicatonScope = "Global";  
      
    // Create the datasource record  
    current.name = "File import from: " + email.from;
    current.import_set_table_name = importSetTableName;  
    current.file_retrieval_method = "Attachment";  
    current.type = "File";  
    current.format = fileFormat;
    current.header_row = 1;  
    current.sheet_number = 1;  
    current.sys_package.setDisplayValue(applicatonScope);  
    current.sys_scope.setDisplayValue(applicatonScope);  
    var dataSourceID = current.insert();  
      
    /* 
     * Schedule Load of Attachment 
     * 
     * This inbound email action will generate an import data source, however the attachment isn't copied to the data source until 
     * after the insert of the record.  Scheduling the import to happen 30 seconds later so that attachment has time to be copied. 
     */  
    new global.EmailFileImportUtils().scheduleImport(dataSourceID, transformMapIDs);  
      
})(current, event, email, logger, classifier);  ]]></script>
        <stop_processing>false</stop_processing>
        <sys_class_name>sysevent_in_email_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-12 13:24:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>8e5144300fcb0300c0c588cce1050e4e</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Email Attachment Import</sys_name>
        <sys_overrides/>
        <sys_package display_value="Email Import" source="x_17179_email_impo">b14144fc0f4b0300c0c588cce1050ee6</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Email Import">b14144fc0f4b0300c0c588cce1050ee6</sys_scope>
        <sys_update_name>sysevent_in_email_action_8e5144300fcb0300c0c588cce1050e4e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-12 13:40:08</sys_updated_on>
        <table>sys_data_source</table>
        <template/>
        <type>new</type>
    </sysevent_in_email_action>
</record_update>
